1、正则表达式：
   1、最简单的正则：原文本身	/no/gi;

   /^正则表达式$/：验证，因为验证需要用户完全满足我们的要求
   /正则表达式/g："no zuo no die",会找到所有的no

   2、备选字符集：[备选字符列表]	[0-9] [\u4e00-\u9fa5]

   3、预定义字符集：
	一位数字：\d
	一位数字，字母，下划线：\w
	一位除了换行外的任意字符：.
	一位空白字符：\s

	单词边界：\b

   4、量词：
      至少一个，多了不限：+
      可有可无，最多一个：?
      可有可无，多了不限：*

      必须m次：{m}
      至少m次，最多n次：{m,n}
      至少m次，多了不限：{m,}

   5、选择和分组
	^(规则1|规则)2$

      分组很特殊：如果str.replace(reg,"替换的内容");
	替换的内容可以使用$n去代表第n组找到的内容

   6、开头：^
      结尾：$
      前加^后加$，完全匹配，验证！

   7、预判
      (?![a-zA-Z]+$)
      会得到结论

**********************************************************************************
   切割：var arr=str.split(str/reg);

   替换/格式化/删除：
	 var newStr=str.replace(reg,"return的结果");

   正则对象：创建：2种
	直接量：var reg=/正则表达式/后缀;
	构造函数：var reg=new RegExp("正则表达式","后缀");

   验证：var bool=reg.test(user);