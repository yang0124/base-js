1、循环
   while(条件){循环体;}
   do{循环体}while(循环条件)
   do...while和while的区别
   区别只有第一次，如果第一次都满足的情况，那么大家一模一样
       如果第一次不满足的话，while循环一次都不会执行，而 do while 至少会做一次
   for(var i=0;i<=10;i++){循环体;}

   终止循环：break：退出整个循环
	     continue：退出本次循环，继续判断循环条件，满足继续执行，不满足，退出循环

2、*****数组
   程序 = 数据结构 + 算法;
   数据结构：数据在内存中的存储结构
	     好的数据结构，可以极大提高程序的执行效率

   什么是数组：内存中连续存储多个数据的存储空间，再起一个名字
	       其实就是多个变量的集合，都起了一个统一的名字
   何时使用：只要存储多个相关的数据，都要用数组集中存储
   如何使用：
	1、创建：
	   1、数组直接量：var arr=[值1,值2,值3...];
	   2、构造函数方式：var arr=new Array(值1,值2,值3...);
	      特殊：如果构造函数方式传参只传入了*一个数字*
		    new Array(5);
		    其实是指创建了一个长度为5的空数组
	   访问：数组名[下标] -- 元素
		 每个数组元素的用法和变量完全一样
	   特殊：读取元素：下标越界：undefined！
	         修改元素：下标越界：自动在新位置添加新元素
		  	结果：下标可能不连续 -- 稀疏数组

	   不限制：
	     1、不限制元素的个数
	     2、不限制元素的类型
	     3、不限制下标越界 -- 但是咱们尽量不要这么做

	2、属性：length属性：记录着数组的元素的个数！
	   在稀疏数组中，实际元素个数，一定小于length
	   但是，任何数组的length属性永远等于最大下标+1
		 数组最后一个元素的下标永远等于arr[arr.length-1]

	   固定套路：
	     1、最后一个元素：arr[arr.length-1]
	     2、最后添加元素：arr[arr.length]=新值;
	     3、从后面删除元素：arr.length-=n;

	   垃圾回收器：伴随着主程序后台运行的，自动回收不再使用的东西
	     何时回收：如果一个对象的引用计数器为0
	     所以，我们用完了比较大的东西以后不会在使用到的可以释放
		   但是引用类型释放必须要释放干净
	   建议：如果使用过较大的对象，在使用后，就要释放
		 如何释放：var 变量名=null;

	3、循环遍历数组
	   for(var i=0;i<arr.length;i++){
		arr[i];
	   }

	索引数组：下标都是数字的数组

	关联（hash）数组：
	  什么是：可以自定义下标名称的数组
	  为什么：索引数组的下标无具体的意义，不便于查找
	  何时使用：只要需要自定义数组下标时
		    -- 便于查找，下标有意义
	  创建：2步
		1、创建空数组
		2、向空数组中添加指定下标名称的元素
		   数组名["name"]=新值;
	  访问：数组名["自定义下标"]
	  强调：hash数组中的length失效！永远为0！

	  遍历关联数组：for in循环
	    for(var i in arr){//既可以遍历hash数组，也可以遍历索引数组
		i//会自动获得下标
		arr[i];//当前元素
	    }
	  js中一切的对象的底层都是hash数组

	***hash数组的原理：
	   hash算法：将字符串，计算出一个数字
	             如果字符串的内容是相同的，那么计算出的数字也一定是相同的
	   添加元素：将自定义下标给了hash算法，得到了一个数字地址，就将元素保存在数字		     地址之中
	   获取元素：将自定义下标给了hash算法，得到和之前一个样的数字地址，通过数字地		     址就能找到里边存着的人

上午练习：1、尝试do...while和while的区别和continue与break
	  2、尝试索引数组的特殊创建
	  3、尝试创建hash数组，获得某个元素，并且在去获得所有的内容

-----------------------------------------------------------------------------------

3、*****数组的API：浏览器厂商已经实现的方法
		   程序员不需要创建，直接使用
		   数组的API：只有数组可以使用
   强调：所有的API都要熟背

   1、arr to string
      1、var str=arr.toString();
	 每个元素值之间用逗号分隔

     *2、var str=arr.join("连接符");
	 可以自定义任意连接符
	 省略"连接符"参数，等效于toString()

	 固定套路：
		1、将字符数组拼接为单词(无缝拼接)
		   问题：for循环频繁的字符串拼接会造成资源浪费
		   解决：先将要拼接的字符串放入一个数组中
			 最后将数组进行无缝拼接
			 var str=arr.join("");

		2、*将数组拼接为页面元素
		   var arr1=["-请选择-","北京","南京","西京","东京","重庆"];
		   var str="<option>"+arr1.join("</option><option>")+"</option>";
		   sel1.innerHTML=str;

	 二级联动：获得一个下标：select.selectedIndex;

   2、拼接数组：将concat后的参数，拼接到arr之后
      var newArr=arr.concat(值1,值2...);
      强调：1、concat不修改原数组，只能返回新数组。
	    2、concat参数中的数组会被打散为单个元素再拼接。

   3、*获取子数组：从arr中截取starti到endi位置的元素组成的子数组
      var subArr=arr.slice(starti,endi+1);
      强调：1、slice不修改原数组，只能返回新数组。
	    2、含头不含尾
	    3、省略第二个参数，表示从starti一直获取到结尾
	    4、如果两个参数都省略，表示复制一份

此线以上所有的API都不修改原数组
-----------------------------------------------------------------------------------
此线以上所有的API都直接修改原数组

   4、*splice：删除、插入、替换
      强调：直接修改原数组！
      删除：var deletes=arr.splice(starti,n);
	强调：其实splice也有返回值
	      返回所有被删除的元素组成的子数组
      插入：arr.splice(starti,0,值1,值2...);
	强调：原starti位置的元素以及后续元素都会被往后顺移
      替换：arr.splice(starti,n,值1,值2...);
	从starti位置开始删除n个元素，插入新元素
	强调：删除的个数和插入的个数不必相同

   5、翻转数组：arr.reverse();

作业：1、实现二级联动：要求至少要有10个城市，10个区县
      2、PPT 64页 就是我画图这个题，使用API完成
      3、选项卡效果
      4、第二个项目：金夫人一套：下周3




















