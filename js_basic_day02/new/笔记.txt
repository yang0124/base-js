.1、***数据类型转换
   javascript是弱类型的语言
   数据的类型由数据决定
   
   对于不同数据类型的运算，数据类型会进行转换
	number + string = string
	number + boolean = number

   在javascript中，想要查看数据类型：typeof(变量或者表达式);

   1、*隐式转换
      自动转换：不需要手动指定，完全根据程序自己来的转换
        1、算术运算：默认都是将左右两边转为数字再运算
	   特殊：+运算：只要出现了一个字符串则变为拼接
	2、undefined转为数字，结果是NaN
	3、null转为数字，结果是0
	4、true转为数字转为1，false转为数字为0
      NaN：Not a Number：不是一个数字，但是确实是数字类型
           用户有可能会可以输入，导致我们得到的是一个NaN
	   但是普通的比较运算没有办法知道是不是NaN
	   解决：isNaN(变量): true -> 是NaN
			      false -> 不是NaN
	   经常反用：判断是不是数字
		!isNaN(变量);//处理恶意输入的

    2、显示转换
       页面上所有用户手动录入的数据，都是string类型
       强制转换：程序员显示的调用了某些方法，使我们的数据类型发生了变化
       1、toString()
	  用法：x.toString();
	  转string，任何数据类型的数据调用toString()，都会变成string类型
	  强调：null和undefined不能使用toString()，因为他们不能使用.操作任何东西
	  var num=12;
	  num.toString();

       2、*parseInt(x);
          Int -> integer 整数
	  将 string 或者 number 类型中的整数部分的数字，转换出来
	  语法：parseInt(等待转换的数据);

	  从左到右的转换，碰到第一个非数字字符，就停止转换，不认识小数点
	  如何一来就碰到了不认识的，则为NaN
	  parseInt(35.5) -> 35
	  parseInt("35.5") -> 35
	  parseInt("hello35") -> NaN
	  parseInt("35px") -> 35

       3、*parseFloat(x); 操作完全等效于parseInt(),认识第一个小数点
	  注意：parseInt() || parseFloat()只能转数字和字符串，其余类型都转为NaN

       4、Number(x)：将任何类型转换数字的
	  其实就是隐式转换，一般都不会手动使用
	  可以转任意类型
	  但是：只要碰到的不是纯数字组成的字符串，则为NaN
		Number("35px") -> NaN
	  
2、****函数
   url(图像路径)：完成了一个根据图像路径显示图像的功能
   rotate(45deg)：完成了一个顺时针旋转45度的功能

   javascript中的函数：完成了...功能
   1、什么是函数
      函数(function),也称之为方法，是一段被预定好，可以被反复使用的代码段，是一个独立        的功能体，可以将若干操作代码放在一个函数里
   
   2、定义函数 以及 功能
      语法：使用 function 关键字
      function 函数名(){
	 //执行的操作代码;
      }
      注意：函数定义好之后，不会立刻执行，只有在【调用】之后才会执行

   3、调用函数
      函数名();
      注意：一般来说可以和页面上的元素绑定在一起，为元素添加绑定事件
	<any on事件(click/mouseover/mouseout)>
      
   4、什么样的内容适合放在function中
      1、要被反复执行的代码，适合放在function中
      2、需要用户自己触发的（交互行为）
      3、不希望打开页面立刻执行，在某个特殊的时机才执行

   注意：养好习惯，没写完一个功能就封装为一个函数

   5、定义带参数的函数
      榨汁机 --> function
      榨汁机 需要什么东西才能榨出汁，取决于你的原材料
      原材料 --> 参数，可以使苹果，梨子，翔...

      参数就是为function提供了在运行过程中所需要用到的原材料（数据）

      语法：function 函数名(形式参数){//自己需要做的操作}
      在定义函数功能时定义的参数，称之为形式参数，简称形参

      调用带参数的函数，*必须*向里面传入实际参数，称之为实参
      函数名(100);

      注意：不管是实参还是形参，多个之间都用逗号隔开

      比如：
	function add(a,b){
		console.log(a+b);
	}
	add(1,2);
	add(3,4);

   总结：1、以后任何时候都要将你的代码封装为函数
	 2、带参数的函数不一定非得使用，何时使用（做的事是固定的，但是结果希望不同）
	 3、传入实参的时候注意顺序一定要保持一致
	 4、传入的实参个数和形参个数尽量的对应起来

3、分支结构
   流程的控制

   程序的流程控制有三种：
	1、顺序结构（默认）
	   代码从上向下执行
	2、分支/选择 结构
	   根据条件，选择一部分代码执行
	3、循环结构
	   根据条件，判断是否需要重复的执行某一段代码
	
    比较运算符
    >,<,>=,<=,==,!=   
    ==：判断等于，判断两边的操作数，是否相等，如果相等，则为true，否则就是false
    !=：两边的操作数，不相等则为真，相等为假
    以上6个运算符的结果都是boolean类型

    if结构
    当条件满足时，执行某些语句，条件不满足时，则不允许这些语句
 
    //一个条件一件事，满足就做，不满足就不做
    if(条件){
	语句1
    }

    //一个条件两件事，满足就做第一件，不满足做第二件
    if(条件){
	语句1
    }else{
	语句2
    }
    
    //多个条件多件事，满足谁，就做谁
    if(条件){
	语句1
    }else if(条件){
	语句2
    }else{
	默认语句
    }

作业：
   1、尝试五种原始类型算术运算的隐式转换
   2、尝试新学的四种强制转换
   3、尝试创建一个函数，并且调用（2种）
   4、将上周的作业：克莱拖和根据分数送礼物封装为函数，绑定在页面元素之上
		   注意：要做恶意输入的判断
-----------------------------------------------------------------------------------
   5、创建一个函数，永远输出，谁在什么时候干什么
   6、PPT32页收银系统
   7、让用户自己输入工资，计算税收：
      20000
      9000 10% 11000*0.1
      5000 5%  4000*0.05
      3500 2.5% 1500*0.025

      统一要求：封装成函数，使用点击事件，而且要求该是用户输入的都要用户输入
		用户输入的地方都必须放置恶意输入